// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/database/models/annotation.dart';
import 'app/database/models/annotation_bounds.dart';
import 'app/database/models/comment.dart';
import 'app/database/models/metadata.dart';
import 'app/database/models/resource_model.dart';
import 'app/database/models/tag.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3965493186035185519),
      name: 'Annotation',
      lastPropertyId: const IdUid(9, 9174180981644186355),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1111617394466000055),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4096001806471590801),
            name: 'text',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8667925886230878247),
            name: 'keyWords',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 863628403157166423),
            name: 'createdDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3629246444202599494),
            name: 'modifiedDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6997129562113086968),
            name: 'boundsId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 6619088394181912300),
            relationTarget: 'AnnotationBounds'),
        ModelProperty(
            id: const IdUid(7, 1748238405797494837),
            name: 'commentId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 4442986349168894896),
            relationTarget: 'Comment'),
        ModelProperty(
            id: const IdUid(8, 6969957969196270026),
            name: 'resourceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 5375943514303345433),
            relationTarget: 'ResourceModel'),
        ModelProperty(
            id: const IdUid(9, 9174180981644186355),
            name: 'dbColor',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 5268128295793448591),
            name: 'backlinks',
            targetId: const IdUid(1, 3965493186035185519))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 51963621201805884),
      name: 'AnnotationBounds',
      lastPropertyId: const IdUid(5, 6455133834933922782),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8120623583160883491),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7846405417281308789),
            name: 'xOffset1',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6975723537469251808),
            name: 'xOffset2',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8982781720132876437),
            name: 'yOffset1',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6455133834933922782),
            name: 'yOffset2',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 7430174701284610166),
      name: 'Comment',
      lastPropertyId: const IdUid(4, 4622939945708309980),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7606012575500123632),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5567083221332978302),
            name: 'text',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6036606503360400721),
            name: 'createdDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4622939945708309980),
            name: 'modifiedDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 2960173941353202022),
      name: 'Metadata',
      lastPropertyId: const IdUid(5, 7141130183502346640),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1700456527006957795),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5742421373580366069),
            name: 'authours',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3940698091852726604),
            name: 'publisher',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5310451309569269382),
            name: 'published',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7141130183502346640),
            name: 'resourceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 8156027737338210916),
            relationTarget: 'ResourceModel')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 1975252279855882229),
      name: 'ResourceModel',
      lastPropertyId: const IdUid(7, 4709636709119030346),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 230734659566341843),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5544837741777264062),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4119554345690517336),
            name: 'customName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8927440069218093463),
            name: 'filePath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4011826619568277350),
            name: 'createdDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2843465248907091237),
            name: 'modifiedDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4709636709119030346),
            name: 'metadataId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 235655519406377623),
            relationTarget: 'Metadata')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 6423600076939425364),
            name: 'annotations',
            targetId: const IdUid(1, 3965493186035185519)),
        ModelRelation(
            id: const IdUid(3, 7180562354932414813),
            name: 'tags',
            targetId: const IdUid(6, 5013042518281969629))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 5013042518281969629),
      name: 'Tag',
      lastPropertyId: const IdUid(3, 103376511721398340),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7948500334679202558),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8228792869345973332),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 103376511721398340),
            name: 'color',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(4, 349234033409775690),
            name: 'resources',
            targetId: const IdUid(5, 1975252279855882229)),
        ModelRelation(
            id: const IdUid(5, 2165903840679947403),
            name: 'annotations',
            targetId: const IdUid(1, 3965493186035185519))
      ],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 5013042518281969629),
      lastIndexId: const IdUid(5, 235655519406377623),
      lastRelationId: const IdUid(5, 2165903840679947403),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Annotation: EntityDefinition<Annotation>(
        model: _entities[0],
        toOneRelations: (Annotation object) =>
            [object.bounds, object.comment, object.resource],
        toManyRelations: (Annotation object) =>
            {RelInfo<Annotation>.toMany(1, object.id!): object.backlinks},
        getId: (Annotation object) => object.id,
        setId: (Annotation object, int id) {
          object.id = id;
        },
        objectToFB: (Annotation object, fb.Builder fbb) {
          final textOffset = fbb.writeString(object.text);
          final keyWordsOffset = fbb.writeString(object.keyWords);
          fbb.startTable(10);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, textOffset);
          fbb.addOffset(2, keyWordsOffset);
          fbb.addInt64(3, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(4, object.modifiedDate.millisecondsSinceEpoch);
          fbb.addInt64(5, object.bounds.targetId);
          fbb.addInt64(6, object.comment.targetId);
          fbb.addInt64(7, object.resource.targetId);
          fbb.addInt64(8, object.dbColor);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final keyWordsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final createdDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final modifiedDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = Annotation(
              id: idParam,
              text: textParam,
              keyWords: keyWordsParam,
              createdDate: createdDateParam,
              modifiedDate: modifiedDateParam)
            ..dbColor =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.bounds.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.bounds.attach(store);
          object.comment.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.comment.attach(store);
          object.resource.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.resource.attach(store);
          InternalToManyAccess.setRelInfo<Annotation>(object.backlinks, store,
              RelInfo<Annotation>.toMany(1, object.id!));
          return object;
        }),
    AnnotationBounds: EntityDefinition<AnnotationBounds>(
        model: _entities[1],
        toOneRelations: (AnnotationBounds object) => [],
        toManyRelations: (AnnotationBounds object) => {},
        getId: (AnnotationBounds object) => object.id,
        setId: (AnnotationBounds object, int id) {
          object.id = id;
        },
        objectToFB: (AnnotationBounds object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addFloat64(1, object.xOffset1);
          fbb.addFloat64(2, object.xOffset2);
          fbb.addFloat64(3, object.yOffset1);
          fbb.addFloat64(4, object.yOffset2);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final xOffset1Param =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final xOffset2Param =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final yOffset1Param =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final yOffset2Param =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = AnnotationBounds(
              id: idParam,
              xOffset1: xOffset1Param,
              xOffset2: xOffset2Param,
              yOffset1: yOffset1Param,
              yOffset2: yOffset2Param);

          return object;
        }),
    Comment: EntityDefinition<Comment>(
        model: _entities[2],
        toOneRelations: (Comment object) => [],
        toManyRelations: (Comment object) => {},
        getId: (Comment object) => object.id,
        setId: (Comment object, int id) {
          object.id = id;
        },
        objectToFB: (Comment object, fb.Builder fbb) {
          final textOffset = fbb.writeString(object.text);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, textOffset);
          fbb.addInt64(2, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(3, object.modifiedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final createdDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final modifiedDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final object = Comment(
              id: idParam,
              text: textParam,
              createdDate: createdDateParam,
              modifiedDate: modifiedDateParam);

          return object;
        }),
    Metadata: EntityDefinition<Metadata>(
        model: _entities[3],
        toOneRelations: (Metadata object) => [object.resource],
        toManyRelations: (Metadata object) => {},
        getId: (Metadata object) => object.id,
        setId: (Metadata object, int id) {
          object.id = id;
        },
        objectToFB: (Metadata object, fb.Builder fbb) {
          final authoursOffset = object.authours == null
              ? null
              : fbb.writeList(object.authours!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final publisherOffset = object.publisher == null
              ? null
              : fbb.writeString(object.publisher!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, authoursOffset);
          fbb.addOffset(2, publisherOffset);
          fbb.addInt64(3, object.published?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.resource.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final publishedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final authoursParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 6);
          final publishedParam = publishedValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(publishedValue);
          final publisherParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object = Metadata(
              id: idParam,
              authours: authoursParam,
              published: publishedParam,
              publisher: publisherParam);
          object.resource.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.resource.attach(store);
          return object;
        }),
    ResourceModel: EntityDefinition<ResourceModel>(
        model: _entities[4],
        toOneRelations: (ResourceModel object) => [object.metadata],
        toManyRelations: (ResourceModel object) => {
              RelInfo<ResourceModel>.toMany(2, object.id!): object.annotations,
              RelInfo<ResourceModel>.toMany(3, object.id!): object.tags
            },
        getId: (ResourceModel object) => object.id,
        setId: (ResourceModel object, int id) {
          object.id = id;
        },
        objectToFB: (ResourceModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final customNameOffset = fbb.writeString(object.customName);
          final filePathOffset = fbb.writeString(object.filePath);
          fbb.startTable(8);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, customNameOffset);
          fbb.addOffset(3, filePathOffset);
          fbb.addInt64(4, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(5, object.modifiedDate.millisecondsSinceEpoch);
          fbb.addInt64(6, object.metadata.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final customNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final filePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final createdDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final modifiedDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final object = ResourceModel(
              id: idParam,
              name: nameParam,
              customName: customNameParam,
              filePath: filePathParam,
              createdDate: createdDateParam,
              modifiedDate: modifiedDateParam);
          object.metadata.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.metadata.attach(store);
          InternalToManyAccess.setRelInfo<ResourceModel>(object.annotations,
              store, RelInfo<ResourceModel>.toMany(2, object.id!));
          InternalToManyAccess.setRelInfo<ResourceModel>(
              object.tags, store, RelInfo<ResourceModel>.toMany(3, object.id!));
          return object;
        }),
    Tag: EntityDefinition<Tag>(
        model: _entities[5],
        toOneRelations: (Tag object) => [],
        toManyRelations: (Tag object) => {
              RelInfo<Tag>.toMany(4, object.id!): object.resources,
              RelInfo<Tag>.toMany(5, object.id!): object.annotations
            },
        getId: (Tag object) => object.id,
        setId: (Tag object, int id) {
          object.id = id;
        },
        objectToFB: (Tag object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.color);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final colorParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = Tag(id: idParam, name: nameParam, color: colorParam);
          InternalToManyAccess.setRelInfo<Tag>(
              object.resources, store, RelInfo<Tag>.toMany(4, object.id!));
          InternalToManyAccess.setRelInfo<Tag>(
              object.annotations, store, RelInfo<Tag>.toMany(5, object.id!));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Annotation] entity fields to define ObjectBox queries.
class Annotation_ {
  /// see [Annotation.id]
  static final id =
      QueryIntegerProperty<Annotation>(_entities[0].properties[0]);

  /// see [Annotation.text]
  static final text =
      QueryStringProperty<Annotation>(_entities[0].properties[1]);

  /// see [Annotation.keyWords]
  static final keyWords =
      QueryStringProperty<Annotation>(_entities[0].properties[2]);

  /// see [Annotation.createdDate]
  static final createdDate =
      QueryIntegerProperty<Annotation>(_entities[0].properties[3]);

  /// see [Annotation.modifiedDate]
  static final modifiedDate =
      QueryIntegerProperty<Annotation>(_entities[0].properties[4]);

  /// see [Annotation.bounds]
  static final bounds = QueryRelationToOne<Annotation, AnnotationBounds>(
      _entities[0].properties[5]);

  /// see [Annotation.comment]
  static final comment =
      QueryRelationToOne<Annotation, Comment>(_entities[0].properties[6]);

  /// see [Annotation.resource]
  static final resource =
      QueryRelationToOne<Annotation, ResourceModel>(_entities[0].properties[7]);

  /// see [Annotation.dbColor]
  static final dbColor =
      QueryIntegerProperty<Annotation>(_entities[0].properties[8]);

  /// see [Annotation.backlinks]
  static final backlinks =
      QueryRelationToMany<Annotation, Annotation>(_entities[0].relations[0]);
}

/// [AnnotationBounds] entity fields to define ObjectBox queries.
class AnnotationBounds_ {
  /// see [AnnotationBounds.id]
  static final id =
      QueryIntegerProperty<AnnotationBounds>(_entities[1].properties[0]);

  /// see [AnnotationBounds.xOffset1]
  static final xOffset1 =
      QueryDoubleProperty<AnnotationBounds>(_entities[1].properties[1]);

  /// see [AnnotationBounds.xOffset2]
  static final xOffset2 =
      QueryDoubleProperty<AnnotationBounds>(_entities[1].properties[2]);

  /// see [AnnotationBounds.yOffset1]
  static final yOffset1 =
      QueryDoubleProperty<AnnotationBounds>(_entities[1].properties[3]);

  /// see [AnnotationBounds.yOffset2]
  static final yOffset2 =
      QueryDoubleProperty<AnnotationBounds>(_entities[1].properties[4]);
}

/// [Comment] entity fields to define ObjectBox queries.
class Comment_ {
  /// see [Comment.id]
  static final id = QueryIntegerProperty<Comment>(_entities[2].properties[0]);

  /// see [Comment.text]
  static final text = QueryStringProperty<Comment>(_entities[2].properties[1]);

  /// see [Comment.createdDate]
  static final createdDate =
      QueryIntegerProperty<Comment>(_entities[2].properties[2]);

  /// see [Comment.modifiedDate]
  static final modifiedDate =
      QueryIntegerProperty<Comment>(_entities[2].properties[3]);
}

/// [Metadata] entity fields to define ObjectBox queries.
class Metadata_ {
  /// see [Metadata.id]
  static final id = QueryIntegerProperty<Metadata>(_entities[3].properties[0]);

  /// see [Metadata.authours]
  static final authours =
      QueryStringVectorProperty<Metadata>(_entities[3].properties[1]);

  /// see [Metadata.publisher]
  static final publisher =
      QueryStringProperty<Metadata>(_entities[3].properties[2]);

  /// see [Metadata.published]
  static final published =
      QueryIntegerProperty<Metadata>(_entities[3].properties[3]);

  /// see [Metadata.resource]
  static final resource =
      QueryRelationToOne<Metadata, ResourceModel>(_entities[3].properties[4]);
}

/// [ResourceModel] entity fields to define ObjectBox queries.
class ResourceModel_ {
  /// see [ResourceModel.id]
  static final id =
      QueryIntegerProperty<ResourceModel>(_entities[4].properties[0]);

  /// see [ResourceModel.name]
  static final name =
      QueryStringProperty<ResourceModel>(_entities[4].properties[1]);

  /// see [ResourceModel.customName]
  static final customName =
      QueryStringProperty<ResourceModel>(_entities[4].properties[2]);

  /// see [ResourceModel.filePath]
  static final filePath =
      QueryStringProperty<ResourceModel>(_entities[4].properties[3]);

  /// see [ResourceModel.createdDate]
  static final createdDate =
      QueryIntegerProperty<ResourceModel>(_entities[4].properties[4]);

  /// see [ResourceModel.modifiedDate]
  static final modifiedDate =
      QueryIntegerProperty<ResourceModel>(_entities[4].properties[5]);

  /// see [ResourceModel.metadata]
  static final metadata =
      QueryRelationToOne<ResourceModel, Metadata>(_entities[4].properties[6]);

  /// see [ResourceModel.annotations]
  static final annotations =
      QueryRelationToMany<ResourceModel, Annotation>(_entities[4].relations[0]);

  /// see [ResourceModel.tags]
  static final tags =
      QueryRelationToMany<ResourceModel, Tag>(_entities[4].relations[1]);
}

/// [Tag] entity fields to define ObjectBox queries.
class Tag_ {
  /// see [Tag.id]
  static final id = QueryIntegerProperty<Tag>(_entities[5].properties[0]);

  /// see [Tag.name]
  static final name = QueryStringProperty<Tag>(_entities[5].properties[1]);

  /// see [Tag.color]
  static final color = QueryIntegerProperty<Tag>(_entities[5].properties[2]);

  /// see [Tag.resources]
  static final resources =
      QueryRelationToMany<Tag, ResourceModel>(_entities[5].relations[0]);

  /// see [Tag.annotations]
  static final annotations =
      QueryRelationToMany<Tag, Annotation>(_entities[5].relations[1]);
}
